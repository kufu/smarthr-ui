---
description: Figma Dev Mode MCP サーバーを使って画面を実装する際に使うルール
globs: 
alwaysApply: false
---
# SmartHR UI 動的実装確認ルール

Figma Dev Mode MCP サーバーを使って SmartHR UI コンポーネントを実装する際の動的確認ルール：

## 🔄 基本ワークフロー

1. **Figmaデータ取得**: MCPサーバーからデザインデータを取得
2. **デザイン詳細分析**: UIパターンとコンポーネントの状態を詳細に観察
3. **使用コンポーネント特定**: Figmaから必要なコンポーネントを識別  
4. **実装動的確認**: 特定されたコンポーネントの実装を確認
5. **適切なコード生成**: 実装仕様とデザイン詳細に基づいたコード生成

## 🎨 Figmaデザイン詳細分析の重要ポイント

### 🔍 必須確認項目

#### 1. **見出しの階層とサイズ**
- **画面タイトル**: 大きなフォントサイズ → `PageHeading`
- **セクションタイトル**: 中程度のフォントサイズ → `Heading`（デフォルト）
- **ブロックタイトル**: 小さめのフォントサイズ → `Heading type="blockTitle"`

#### 2. **ボタンの種類とアイコン**
- **下矢印アイコン付き**: `DropdownMenuButton`
- **単色ボタン**: `Button variant="secondary"`
- **プライマリボタン**: `Button`（デフォルト）

#### 3. **情報パネルの状態**
- **開閉ボタンなし**: `InformationPanel`（デフォルト）
- **開閉ボタンあり**: `InformationPanel togglable`

#### 4. **テーブルとページネーション**
- **中央寄せのページネーション**: `<Center><Pagination /></Center>`
- **左寄せのページネーション**: `<Pagination />`
- **テーブルのスクロール**: `<Base overflow="auto">`

## 🚀 実践的ワークフロー例

### Phase 1: Figmaデータ取得と詳細分析
```bash
# 1. Figmaからコード生成
mcp_Figma_Dev_Mode_MCP_get_code

# 2. Figmaからイメージを取得して詳細観察
mcp_Figma_Dev_Mode_MCP_get_image

# 3. デザインの詳細確認
# - 見出しのサイズ比較
# - ボタンのアイコンの有無
# - パネルの開閉ボタンの有無
# - レイアウトの中央寄せの有無
```

### Phase 2: SmartHR UI特有のパターン確認
```bash
# 4. 特定されたコンポーネントの実装を確認
read_file packages/smarthr-ui/src/components/Heading/Heading.tsx  # PageHeading vs Heading
read_file packages/smarthr-ui/src/components/Dropdown/DropdownMenuButton/DropdownMenuButton.tsx
read_file packages/smarthr-ui/src/components/InformationPanel/InformationPanel.tsx
read_file packages/smarthr-ui/src/components/Layout/Center/Center.tsx
```

### Phase 3: 実装仕様に基づくコード生成
```typescript
// 5. 正確なコンポーネント選択でコード生成
// 画面タイトルは必ずPageHeading
<PageHeading>配置プロジェクト</PageHeading>

// ドロップダウンボタンは子要素を持つ
<DropdownMenuButton label="配置プロジェクトを作成">
  <Button>新規に作成</Button>
  <Button>プロジェクトを統合して作成</Button>
</DropdownMenuButton>
```

## 📋 SmartHR UI コンポーネント選択指針

### 🎯 見出しコンポーネントの選択

#### PageHeading vs Heading
```typescript
// ✅ 正しい使い分け
<PageHeading>画面のメインタイトル</PageHeading>        // 画面に1つだけ
<Heading>セクションタイトル</Heading>                 // セクションの見出し
<Heading type="blockTitle">ブロックタイトル</Heading>   // ブロックの見出し

// ❌ 間違った使い方
<Heading tag="h1">画面のメインタイトル</Heading>        // PageHeadingを使うべき
```

#### 判断基準
- **画面で最も大きなタイトル** → `PageHeading`
- **セクションの見出し** → `Heading`（デフォルト）
- **小さなブロックの見出し** → `Heading type="blockTitle"`

### 🔽 ボタンコンポーネントの選択

#### Button vs DropdownMenuButton
```typescript
// ✅ Figmaでドロップダウン矢印アイコンがある場合
<DropdownMenuButton label="ラベル">
  <Button>選択肢1</Button>
  <Button>選択肢2</Button>
</DropdownMenuButton>

// ✅ Figmaで単純なボタンの場合
<Button variant="secondary">ボタン</Button>

// ❌ ドロップダウンなのに単純なButtonを使用
<Button>ドロップダウンのはずのボタン</Button>
```

#### 判断基準
- **下矢印アイコンあり** → `DropdownMenuButton`
- **複数の選択肢が想定される** → `DropdownMenuButton`
- **単一のアクション** → `Button`

### 📋 InformationPanelの設定

#### togglable の判断
```typescript
// ✅ Figmaで開閉ボタンが見える場合
<InformationPanel title="タイトル" togglable>
  内容
</InformationPanel>

// ✅ Figmaで開閉ボタンがない場合（デフォルト）
<InformationPanel title="タイトル">
  内容
</InformationPanel>

// ❌ 不要なtogglableの指定
<InformationPanel title="タイトル" togglable={true}>  // trueは冗長
```

#### 判断基準
- **開閉ボタンが見える** → `togglable`
- **開閉ボタンがない** → togglableプロパティなし

### 📊 テーブルとレイアウト

#### Pagination の配置
```typescript
// ✅ Figmaでページネーションが中央寄せの場合
<Center>
  <Pagination total={98} current={50} onClick={...} />
</Center>

// ✅ Figmaでページネーションが左寄せの場合
<Pagination total={98} current={50} onClick={...} />
```

#### Base の overflow 設定
```typescript
// ✅ テーブルがスクロール可能な場合
<Base overflow="auto">
  <Table>...</Table>
</Base>

// ✅ テーブルがスクロール不要な場合
<Base overflow="hidden">
  <Table>...</Table>
</Base>
```

## 🔍 動的確認チェックリスト

コード生成前に以下を確認：

### 📋 Figmaデザイン確認
- [ ] **画面タイトルのサイズを確認**（大きい→PageHeading、普通→Heading）
- [ ] **ボタンに下矢印アイコンがあるか確認**（あり→DropdownMenuButton）
- [ ] **情報パネルに開閉ボタンがあるか確認**（なし→togglableなし）
- [ ] **ページネーションの配置を確認**（中央→Center、左→そのまま）
- [ ] **テーブルのスクロールの必要性を確認**

### 実装確認
- [ ] **使用コンポーネントの実装ファイルを確認済み**
- [ ] **型定義からプロパティの仕様を把握済み**  
- [ ] **デフォルト値を確認し、不要な明示を避けている**
- [ ] **利用可能なバリアント・オプションを把握済み**

### コード品質
- [ ] **import順序が正しい**（React hooks → smarthr-ui）
- [ ] **インラインスタイルを使用していない**
- [ ] **適切なクラス名を使用している**
- [ ] **Figmaデザインに忠実な実装**

### 💡 コード生成確認
- [ ] **PageHeading vs Heading を正しく選択**
- [ ] **Button vs DropdownMenuButton を正しく選択**
- [ ] **InformationPanel の togglable を正しく設定**
- [ ] **レイアウトコンポーネントを正しく組み合わせ**

## 🎯 よくある間違いと対策

### ❌ よくある間違い
1. **画面タイトルに Heading を使用** → PageHeading を使用すべき
2. **ドロップダウンに Button を使用** → DropdownMenuButton を使用すべき
3. **不要な togglable の指定** → デザインに開閉ボタンがなければ省略
4. **Pagination の配置ミス** → デザインの配置に合わせて Center で囲むかどうか決定

### ✅ 対策
1. **デザインの詳細を必ず観察**
2. **コンポーネントの用途を正確に理解**
3. **実装ファイルを確認してデフォルト値を活用**
4. **SmartHR UI の設計思想を理解**

---

**詳細なデザイン分析と動的確認により、正確で保守性の高いコード生成を実現します。**