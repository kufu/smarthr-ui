---
description: Figma Dev Mode MCP サーバーを使って画面を実装する際に使うルール
globs: 
alwaysApply: false
---
# SmartHR UI 動的実装確認ルール

Figma Dev Mode MCP サーバーを使って SmartHR UI コンポーネントを実装する際の動的確認ルール：

## 🔄 基本ワークフロー

1. **Figmaデータ取得**: MCPサーバーからデザインデータを取得
2. **使用コンポーネント特定**: Figmaから必要なコンポーネントを識別  
3. **実装動的確認**: 特定されたコンポーネントの実装を確認
4. **適切なコード生成**: 実装仕様に基づいたコード生成

## 🚀 実践的ワークフロー例

### Phase 1: Figmaデータ取得と分析
```bash
# 1. Figmaからコード生成
mcp_Figma_Dev_Mode_MCP_get_code

# 2. 使用コンポーネントを特定
# 出力例: InformationPanel, Cluster, Base, Pagination, Switch など
```

### Phase 2: コンポーネント実装の動的確認
```bash
# 3. 特定されたコンポーネントの実装を確認
read_file packages/smarthr-ui/src/components/InformationPanel/InformationPanel.tsx
read_file packages/smarthr-ui/src/components/Cluster/Cluster.tsx
read_file packages/smarthr-ui/src/components/Base/Base.tsx
# ... 他の必要なコンポーネント
```

### Phase 3: 実装仕様に基づくコード生成
```typescript
// 4. 型定義とデフォルト値を確認してコード生成
// InformationPanel: type="info"(default), active=true(default)
<InformationPanel title="タイトル">  {/* デフォルト値活用 */}
  内容
</InformationPanel>
```

## 📁 コンポーネント実装確認手順

### Step 1: 使用コンポーネントの特定
Figmaデータから使用されるコンポーネントを特定し、以下のパスで実装を確認：

```
packages/smarthr-ui/src/components/{ComponentName}/{ComponentName}.tsx
```

### Step 2: 重要な確認ポイント
各コンポーネントの実装確認時に注目すべき項目：

#### 🔧 型定義の確認
```typescript
type Props = {
  // プロパティの型定義
  // 必須/オプショナルの確認
  // デフォルト値の確認
}
```

#### ⚙️ デフォルト値の確認
```typescript
const Component = ({ 
  prop1 = "defaultValue",  // デフォルト値
  prop2,                   // 必須プロパティ
  ...
}) => {
```

#### 🎨 バリアント・オプションの確認
```typescript
const classNameGenerator = tv({
  variants: {
    // 利用可能なバリアント
  }
})
```

## 🎯 動的確認の実践例

### 例: InformationPanelを使用する場合

1. **実装確認**:
   ```bash
   packages/smarthr-ui/src/components/InformationPanel/InformationPanel.tsx
   ```

2. **型定義確認**:
   ```typescript
   type Props = {
     title: ReactNode           // 必須
     type?: 'success' | 'info' | 'warning' | 'error' | 'sync'  // デフォルト: 'info'
     togglable?: boolean        // デフォルト: undefined
     active?: boolean           // デフォルト: true
     // ...
   }
   ```

3. **適切なコード生成**:
   ```tsx
   // デフォルト値を活用（type="info"は省略）
   <InformationPanel title="タイトル">
     内容
   </InformationPanel>
   ```

## 📋 汎用的なベストプラクティス

### import文のパターン
```tsx
import { useState } from 'react'
import {
  // 使用するコンポーネントのみimport
  // アルファベット順で整理
} from 'smarthr-ui'
```

### 基本レイアウトパターン
```tsx
<Container className="shr-bg-background">
  <Stack gap={1.5}>
    {/* メインコンテンツ */}
  </Stack>
</Container>
```

### スタイリング原則
- **インラインスタイルを使用しない**
- SmartHR UIのデザインシステムクラス名を使用
- `className="shr-w-full"` などの適切なクラス名

## 🔍 動的確認チェックリスト

コード生成前に以下を確認：

### 実装確認
- [ ] **使用コンポーネントの実装ファイルを確認済み**
- [ ] **型定義からプロパティの仕様を把握済み**  
- [ ] **デフォルト値を確認し、不要な明示を避けている**
- [ ] **利用可能なバリアント・オプションを把握済み**

### コード品質
- [ ] **import順序が正しい**（React hooks → smarthr-ui）
- [ ] **インラインスタイルを使用していない**
- [ ] **適切なクラス名を使用している**
- [ ] **Figmaデザインに忠実な実装**

### レイアウト構造
- [ ] **適切なコンポーネントの組み合わせ**
- [ ] **デフォルト値を活用した簡潔なコード**
- [ ] **一貫性のあるレイアウトパターン**

## 🎪 コンポーネント確認の自動化

理想的には以下のような確認を自動化：

1. **Figmaコンポーネント → SmartHR UIコンポーネント のマッピング**
2. **実装ファイルの自動読み取り**  
3. **型定義・デフォルト値の自動抽出**
4. **最適なプロパティの自動決定**

## 🔄 継続的改善

このアプローチにより：
- **ルールファイルの簡潔性維持**
- **常に最新の実装仕様に基づくコード生成**
- **新しいコンポーネントへの自動対応**
- **メンテナンス負荷の大幅削減**

## 💡 実装確認の効率化Tips

### 複数コンポーネントの並列確認
```bash
# 複数のコンポーネント実装を同時に確認
read_file packages/smarthr-ui/src/components/ComponentA/ComponentA.tsx &
read_file packages/smarthr-ui/src/components/ComponentB/ComponentB.tsx &
read_file packages/smarthr-ui/src/components/ComponentC/ComponentC.tsx &
```

### 型定義の重点確認項目
- **必須プロパティ** (`prop: Type`)
- **オプショナルプロパティ** (`prop?: Type`)  
- **デフォルト値** (`prop = defaultValue`)
- **ユニオン型** (`prop: 'a' | 'b' | 'c'`)

### よくあるパターンの理解
- **Base**: `overflow` vs `padding` の使い分け
- **Stack**: `gap` のデフォルト値活用
- **Cluster**: `align` と `justify` の組み合わせ
- **FormControl**: `helpMessage` の省略パターン

---

**動的確認により、スケーラブルで正確なコード生成を実現します。**